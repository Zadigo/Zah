from collections import OrderedDict
from typing import Any, Callable, Iterable

import werkzeug
from werkzeug import exceptions
from werkzeug.serving import WSGIRequestHandler
from werkzeug.middleware.shared_data import SharedDataMiddleware
from werkzeug.wrappers import Request

from zah.conf import settings
from zah.httpx.responses import Http404, HttpResponse
from zah.registry import registry
from zah.router import Router
from zah.template import get_template_backend
from zah.template.context import RequestContext


class AppOptions:
    apps: OrderedDict = ...

    def __contains__(self, name) -> bool: ...
    def __getitem__(self, name) -> Any: ...

    @property
    def has_store(self) -> bool: ...
    @property
    def has_router(self) -> bool: ...

    def new_app(self, app: type) -> None: ...
    def has_app(self, name) -> bool: ...


class RouteMixin:
    _routes: list = ...
    has_router: bool = ...

    def add_route(
        self,
        path: str,
        view: Callable,
        name: str = ...
    ) -> None: ...

    def as_route(
        self, 
        path: str, 
        name: str = ...
    ) -> Callable[[Callable], None]: ...


class BaseServer(RouteMixin):
    is_running: bool = ...
    app_options: AppOptions = ...
    headers: dict = ...

    def __call__(self, **kwargs) -> None: ...

    @classmethod
    def create(cls, host: str = ..., port: int = ..., **kwargs) -> None: ...

    def _dispatch_request(self, request: Request) -> HttpResponse: ...
    def _build_request(self, environ, start_response) -> HttpResponse: ...

    def app(
        self, environ: dict,
        start_response: Callable[[bytes], None]
    ) -> Iterable[bytes]: ...

    def use_component(self, component: type) -> None: ...


class DevelopmentServer(BaseServer):
    ...
