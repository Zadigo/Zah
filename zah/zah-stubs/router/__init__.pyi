from collections import deque
from typing import Callable, Deque, Iterator, List, Union

from werkzeug.wrappers import Request


class Router:
    verbose_name: str = ...
    routes: deque = ...

    def __repr__(self) -> str: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

    @property
    def urls(self) -> Deque[List[dict]]: ...
    @classmethod
    def copy(cls) -> Router: ...

    def has_path(self, path: str) -> bool: ...
    def add_route(self, path: str, view: Callable[[
                  Request]], name: str = ...) -> Deque[list[dict]]: ...

    def add_url_patterns(self, urls: Union[list, tuple]) -> None: ...
    def match(self, path: str, route_name: str = ...): ...
    def match_from_name(self, route_name: str): ...
